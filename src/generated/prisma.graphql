# source: http://localhost:4466
# timestamp: Mon Mar 09 2020 18:24:32 GMT-0300 (GMT-03:00)

type AggregateAuthor {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type Author implements Node {
  id: ID!
  authorname: String!
  email: String!
  password: String!
  age: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

"""A connection to a list of items."""
type AuthorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthorEdge]!
  aggregate: AggregateAuthor!
}

input AuthorCreateInput {
  id: ID
  authorname: String!
  email: String!
  password: String!
  age: Int!
  products: ProductCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
}

input AuthorCreateOneWithoutCommentsInput {
  create: AuthorCreateWithoutCommentsInput
  connect: AuthorWhereUniqueInput
}

input AuthorCreateOneWithoutProductsInput {
  create: AuthorCreateWithoutProductsInput
  connect: AuthorWhereUniqueInput
}

input AuthorCreateWithoutCommentsInput {
  id: ID
  authorname: String!
  email: String!
  password: String!
  age: Int!
  products: ProductCreateManyWithoutAuthorInput
}

input AuthorCreateWithoutProductsInput {
  id: ID
  authorname: String!
  email: String!
  password: String!
  age: Int!
  comments: CommentCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type AuthorEdge {
  """The item at the end of the edge."""
  node: Author!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthorOrderByInput {
  id_ASC
  id_DESC
  authorname_ASC
  authorname_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  age_ASC
  age_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AuthorPreviousValues {
  id: ID!
  authorname: String!
  email: String!
  password: String!
  age: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  node: Author
  updatedFields: [String!]
  previousValues: AuthorPreviousValues
}

input AuthorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthorWhereInput
}

input AuthorUpdateInput {
  authorname: String
  email: String
  password: String
  age: Int
  products: ProductUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input AuthorUpdateManyMutationInput {
  authorname: String
  email: String
  password: String
  age: Int
}

input AuthorUpdateOneRequiredWithoutCommentsInput {
  create: AuthorCreateWithoutCommentsInput
  connect: AuthorWhereUniqueInput
  update: AuthorUpdateWithoutCommentsDataInput
  upsert: AuthorUpsertWithoutCommentsInput
}

input AuthorUpdateOneRequiredWithoutProductsInput {
  create: AuthorCreateWithoutProductsInput
  connect: AuthorWhereUniqueInput
  update: AuthorUpdateWithoutProductsDataInput
  upsert: AuthorUpsertWithoutProductsInput
}

input AuthorUpdateWithoutCommentsDataInput {
  authorname: String
  email: String
  password: String
  age: Int
  products: ProductUpdateManyWithoutAuthorInput
}

input AuthorUpdateWithoutProductsDataInput {
  authorname: String
  email: String
  password: String
  age: Int
  comments: CommentUpdateManyWithoutAuthorInput
}

input AuthorUpsertWithoutCommentsInput {
  update: AuthorUpdateWithoutCommentsDataInput!
  create: AuthorCreateWithoutCommentsInput!
}

input AuthorUpsertWithoutProductsInput {
  update: AuthorUpdateWithoutProductsDataInput!
  create: AuthorCreateWithoutProductsInput!
}

input AuthorWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  authorname: String

  """All values that are not equal to given value."""
  authorname_not: String

  """All values that are contained in given list."""
  authorname_in: [String!]

  """All values that are not contained in given list."""
  authorname_not_in: [String!]

  """All values less than the given value."""
  authorname_lt: String

  """All values less than or equal the given value."""
  authorname_lte: String

  """All values greater than the given value."""
  authorname_gt: String

  """All values greater than or equal the given value."""
  authorname_gte: String

  """All values containing the given string."""
  authorname_contains: String

  """All values not containing the given string."""
  authorname_not_contains: String

  """All values starting with the given string."""
  authorname_starts_with: String

  """All values not starting with the given string."""
  authorname_not_starts_with: String

  """All values ending with the given string."""
  authorname_ends_with: String

  """All values not ending with the given string."""
  authorname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  age: Int

  """All values that are not equal to given value."""
  age_not: Int

  """All values that are contained in given list."""
  age_in: [Int!]

  """All values that are not contained in given list."""
  age_not_in: [Int!]

  """All values less than the given value."""
  age_lt: Int

  """All values less than or equal the given value."""
  age_lte: Int

  """All values greater than the given value."""
  age_gt: Int

  """All values greater than or equal the given value."""
  age_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input AuthorWhereUniqueInput {
  id: ID
  email: String
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Comment implements Node {
  id: ID!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: Author!
  product: Product!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  body: String!
  author: AuthorCreateOneWithoutCommentsInput!
  product: ProductCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutProductInput {
  create: [CommentCreateWithoutProductInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: ID
  body: String!
  product: ProductCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutProductInput {
  id: ID
  body: String!
  author: AuthorCreateOneWithoutCommentsInput!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  body: String
  author: AuthorUpdateOneRequiredWithoutCommentsInput
  product: ProductUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  body: String
}

input CommentUpdateManyMutationInput {
  body: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutProductInput {
  create: [CommentCreateWithoutProductInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  deleteMany: [CommentScalarWhereInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutProductInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  body: String
  product: ProductUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutProductDataInput {
  body: String
  author: AuthorUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutProductInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutProductDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutProductInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutProductDataInput!
  create: CommentCreateWithoutProductInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  body: String

  """All values that are not equal to given value."""
  body_not: String

  """All values that are contained in given list."""
  body_in: [String!]

  """All values that are not contained in given list."""
  body_not_in: [String!]

  """All values less than the given value."""
  body_lt: String

  """All values less than or equal the given value."""
  body_lte: String

  """All values greater than the given value."""
  body_gt: String

  """All values greater than or equal the given value."""
  body_gte: String

  """All values containing the given string."""
  body_contains: String

  """All values not containing the given string."""
  body_not_contains: String

  """All values starting with the given string."""
  body_starts_with: String

  """All values not starting with the given string."""
  body_not_starts_with: String

  """All values ending with the given string."""
  body_ends_with: String

  """All values not ending with the given string."""
  body_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: AuthorWhereInput
  product: ProductWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAuthor(data: AuthorCreateInput!): Author!
  createProduct(data: ProductCreateInput!): Product!
  createComment(data: CommentCreateInput!): Comment!
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteComment(where: CommentWhereUniqueInput!): Comment
  upsertAuthor(where: AuthorWhereUniqueInput!, create: AuthorCreateInput!, update: AuthorUpdateInput!): Author!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  updateManyAuthors(data: AuthorUpdateManyMutationInput!, where: AuthorWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  deleteManyAuthors(where: AuthorWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Product implements Node {
  id: ID!
  productname: String!
  desc: String!
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: Author!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  productname: String!
  desc: String!
  published: Boolean!
  author: AuthorCreateOneWithoutProductsInput!
  comments: CommentCreateManyWithoutProductInput
}

input ProductCreateManyWithoutAuthorInput {
  create: [ProductCreateWithoutAuthorInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutCommentsInput {
  create: ProductCreateWithoutCommentsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutAuthorInput {
  id: ID
  productname: String!
  desc: String!
  published: Boolean!
  comments: CommentCreateManyWithoutProductInput
}

input ProductCreateWithoutCommentsInput {
  id: ID
  productname: String!
  desc: String!
  published: Boolean!
  author: AuthorCreateOneWithoutProductsInput!
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  productname_ASC
  productname_DESC
  desc_ASC
  desc_DESC
  published_ASC
  published_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  productname: String!
  desc: String!
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  productname: String

  """All values that are not equal to given value."""
  productname_not: String

  """All values that are contained in given list."""
  productname_in: [String!]

  """All values that are not contained in given list."""
  productname_not_in: [String!]

  """All values less than the given value."""
  productname_lt: String

  """All values less than or equal the given value."""
  productname_lte: String

  """All values greater than the given value."""
  productname_gt: String

  """All values greater than or equal the given value."""
  productname_gte: String

  """All values containing the given string."""
  productname_contains: String

  """All values not containing the given string."""
  productname_not_contains: String

  """All values starting with the given string."""
  productname_starts_with: String

  """All values not starting with the given string."""
  productname_not_starts_with: String

  """All values ending with the given string."""
  productname_ends_with: String

  """All values not ending with the given string."""
  productname_not_ends_with: String
  desc: String

  """All values that are not equal to given value."""
  desc_not: String

  """All values that are contained in given list."""
  desc_in: [String!]

  """All values that are not contained in given list."""
  desc_not_in: [String!]

  """All values less than the given value."""
  desc_lt: String

  """All values less than or equal the given value."""
  desc_lte: String

  """All values greater than the given value."""
  desc_gt: String

  """All values greater than or equal the given value."""
  desc_gte: String

  """All values containing the given string."""
  desc_contains: String

  """All values not containing the given string."""
  desc_not_contains: String

  """All values starting with the given string."""
  desc_starts_with: String

  """All values not starting with the given string."""
  desc_not_starts_with: String

  """All values ending with the given string."""
  desc_ends_with: String

  """All values not ending with the given string."""
  desc_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateInput {
  productname: String
  desc: String
  published: Boolean
  author: AuthorUpdateOneRequiredWithoutProductsInput
  comments: CommentUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  productname: String
  desc: String
  published: Boolean
}

input ProductUpdateManyMutationInput {
  productname: String
  desc: String
  published: Boolean
}

input ProductUpdateManyWithoutAuthorInput {
  create: [ProductCreateWithoutAuthorInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredWithoutCommentsInput {
  create: ProductCreateWithoutCommentsInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutCommentsDataInput
  upsert: ProductUpsertWithoutCommentsInput
}

input ProductUpdateWithoutAuthorDataInput {
  productname: String
  desc: String
  published: Boolean
  comments: CommentUpdateManyWithoutProductInput
}

input ProductUpdateWithoutCommentsDataInput {
  productname: String
  desc: String
  published: Boolean
  author: AuthorUpdateOneRequiredWithoutProductsInput
}

input ProductUpdateWithWhereUniqueWithoutAuthorInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutAuthorDataInput!
}

input ProductUpsertWithoutCommentsInput {
  update: ProductUpdateWithoutCommentsDataInput!
  create: ProductCreateWithoutCommentsInput!
}

input ProductUpsertWithWhereUniqueWithoutAuthorInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutAuthorDataInput!
  create: ProductCreateWithoutAuthorInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  productname: String

  """All values that are not equal to given value."""
  productname_not: String

  """All values that are contained in given list."""
  productname_in: [String!]

  """All values that are not contained in given list."""
  productname_not_in: [String!]

  """All values less than the given value."""
  productname_lt: String

  """All values less than or equal the given value."""
  productname_lte: String

  """All values greater than the given value."""
  productname_gt: String

  """All values greater than or equal the given value."""
  productname_gte: String

  """All values containing the given string."""
  productname_contains: String

  """All values not containing the given string."""
  productname_not_contains: String

  """All values starting with the given string."""
  productname_starts_with: String

  """All values not starting with the given string."""
  productname_not_starts_with: String

  """All values ending with the given string."""
  productname_ends_with: String

  """All values not ending with the given string."""
  productname_not_ends_with: String
  desc: String

  """All values that are not equal to given value."""
  desc_not: String

  """All values that are contained in given list."""
  desc_in: [String!]

  """All values that are not contained in given list."""
  desc_not_in: [String!]

  """All values less than the given value."""
  desc_lt: String

  """All values less than or equal the given value."""
  desc_lte: String

  """All values greater than the given value."""
  desc_gt: String

  """All values greater than or equal the given value."""
  desc_gte: String

  """All values containing the given string."""
  desc_contains: String

  """All values not containing the given string."""
  desc_not_contains: String

  """All values starting with the given string."""
  desc_starts_with: String

  """All values not starting with the given string."""
  desc_not_starts_with: String

  """All values ending with the given string."""
  desc_ends_with: String

  """All values not ending with the given string."""
  desc_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: AuthorWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  author(where: AuthorWhereUniqueInput!): Author
  product(where: ProductWhereUniqueInput!): Product
  comment(where: CommentWhereUniqueInput!): Comment
  authorsConnection(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthorConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  author(where: AuthorSubscriptionWhereInput): AuthorSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
}
